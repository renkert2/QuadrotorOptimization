classdef FlightLog < handle
    properties (Constant)
        RawVarNames string = [...
            "ACC1_label";...
            "ACC2_label";...
            "ACC3_label";...
            "ADSB_label";...
            "AHR2";...
            "AHR2_label";...
            "ARM_label";...
            "ARSP_label";...
            "ASP2_label";...
            "ATT";...
            "ATT_label";...
            "BAR2_label";...
            "BAR3_label";...
            "BARO";...
            "BARO_label";...
            "BAT";...
            "BAT2_label";...
            "BAT3_label";...
            "BAT4_label";...
            "BAT5_label";...
            "BAT6_label";...
            "BAT7_label";...
            "BAT8_label";...
            "BAT9_label";...
            "BAT_label";...
            "BCL2_label";...
            "BCL3_label";...
            "BCL4_label";...
            "BCL5_label";...
            "BCL6_label";...
            "BCL7_label";...
            "BCL8_label";...
            "BCL9_label";...
            "BCL_label";...
            "BCN_label";...
            "CAM_label";...
            "CESC_label";...
            "CMD_label";...
            "CSRV_label";...
            "CTRL";...
            "CTRL_label";...
            "CTUN";...
            "CTUN_label";...
            "D16_label";...
            "D32";...
            "D32_label";...
            "DFLT_label";...
            "DMS_label";...
            "DSF";...
            "DSF_label";...
            "DSTL_label";...
            "DU16_label";...
            "DU32";...
            "DU32_label";...
            "ERR_label";...
            "ESC1_label";...
            "ESC2_label";...
            "ESC3_label";...
            "ESC4_label";...
            "ESC5_label";...
            "ESC6_label";...
            "ESC7_label";...
            "ESC8_label";...
            "EV";...
            "EV_label";...
            "FMTU_label";...
            "FMT_label";...
            "GMB1_label";...
            "GMB2_label";...
            "GMB3_label";...
            "GPA";...
            "GPA2_label";...
            "GPAB_label";...
            "GPA_label";...
            "GPS";...
            "GPS2_label";...
            "GPSB_label";...
            "GPS_label";...
            "GRAW_label";...
            "GRXH_label";...
            "GRXS_label";...
            "GUID_label";...
            "GYR1_label";...
            "GYR2_label";...
            "GYR3_label";...
            "IMT2_label";...
            "IMT3_label";...
            "IMT_label";...
            "IMU";...
            "IMU2";...
            "IMU2_label";...
            "IMU3_label";...
            "IMU_label";...
            "IOMC";...
            "IOMC_label";...
            "ISBD_label";...
            "ISBH_label";...
            "MAG";...
            "MAG2";...
            "MAG2_label";...
            "MAG3_label";...
            "MAG_label";...
            "MAVC_label";...
            "MAV_label";...
            "MODE";...
            "MODE_label";...
            "MOTB";...
            "MOTB_label";...
            "MSG";...
            "MSG1";...
            "MSG_label";...
            "MULT";...
            "MULT_label";...
            "NK11_label";...
            "NK12_label";...
            "NK13_label";...
            "NK14_label";...
            "NKF0_label";...
            "NKF1";...
            "NKF1_label";...
            "NKF2";...
            "NKF2_label";...
            "NKF3";...
            "NKF3_label";...
            "NKF4";...
            "NKF4_label";...
            "NKF5";...
            "NKF5_label";...
            "NKF6";...
            "NKF6_label";...
            "NKF7";...
            "NKF7_label";...
            "NKF8";...
            "NKF8_label";...
            "NKF9";...
            "NKF9_label";...
            "NKQ1";...
            "NKQ1_label";...
            "NKQ2";...
            "NKQ2_label";...
            "NKQ3_label";...
            "NKT1";...
            "NKT1_label";...
            "NKT2";...
            "NKT2_label";...
            "OABR_label";...
            "OADJ_label";...
            "OF_label";...
            "ORGN";...
            "ORGN_label";...
            "PARM";...
            "PIDA";...
            "PIDA_label";...
            "PIDP";...
            "PIDP_label";...
            "PIDR";...
            "PIDR_label";...
            "PIDS_label";...
            "PIDY";...
            "PIDY_label";...
            "PL_label";...
            "PM";...
            "PM_label";...
            "POS";...
            "POS_label";...
            "POWR";...
            "POWR_label";...
            "PRX_label";...
            "PSC";...
            "PSC_label";...
            "PTUN_label";...
            "RAD_label";...
            "RALY_label";...
            "RATE";...
            "RATE_label";...
            "RCIN";...
            "RCIN_label";...
            "RCOU";...
            "RCOU_label";...
            "RFND_label";...
            "RPM_label";...
            "RSSI_label";...
            "SBFE_label";...
            "SBPH_label";...
            "SBRE_label";...
            "SBRH_label";...
            "SBRM_label";...
            "SIDD_label";...
            "SIDS_label";...
            "SIM_label";...
            "SRTL";...
            "SRTL_label";...
            "Seen";...
            "TERR";...
            "TERR_label";...
            "TRIG_label";...
            "UBX1";...
            "UBX1_label";...
            "UBX2";...
            "UBX2_label";...
            "UBY1_label";...
            "UBY2_label";...
            "UNIT";...
            "UNIT_label";...
            "VIBE";...
            "VIBE_label";...
            "VISO_label";...
            "WENC_label";...
            "XK11_label";...
            "XK12_label";...
            "XK13_label";...
            "XK14_label";...
            "XKF0_label";...
            "XKF1_label";...
            "XKF2_label";...
            "XKF3_label";...
            "XKF4_label";...
            "XKF5_label";...
            "XKF6_label";...
            "XKF7_label";...
            "XKF8_label";...
            "XKF9_label";...
            "XKFD_label";...
            "XKQ1_label";...
            "XKQ2_label";...
            "XKQ3_label";...
            "XKV1_label";...
            "XKV2_label"]
    end
    properties
        Raw struct
        Data struct
        
        StartingVoltage double % Used for calibration of Voltage signal
        EndingVoltage double % Used for calibration of Voltage signal
        VehicleMass double % Mass of vehicle, All components including battery
        BatteryCells double
        BatteryCapacity double % mAh
        
        BatteryLookup BattLookup
    end
    properties (Dependent)
        BootTime datetime
        StartingSOC double
        EndingSOC double
    end
    methods
        function obj = FlightLog(file)
            s = load('LiPo_42V_Lookup.mat', 'LiPo_42V_Lookup');
            obj.BatteryLookup = s.LiPo_42V_Lookup;
            
            varnamecell = cellstr(obj.RawVarNames);
            raw = load(file, '-mat', varnamecell{:});
            obj.Raw = raw;
        end
        
        function init(obj)
            obj.Data = makeDataStruct(obj);
            obj.Data = processTimeUS(obj);
            setCorrectedBusVoltage(obj);
            setSOCCurve(obj);
        end
                
        function plot(obj, xfield, yfields)
            arguments
                obj
                xfield (1,2) string
                yfields (:,2) string
            end
            
            x = obj.Data.(xfield(1,1)).(xfield(1,2));
            N_y = size(yfields,1);
            
            t = tiledlayout(N_y,1);
            title(t,"Log Data");
            
            for i = 1:N_y
                nexttile
                y = obj.Data.(yfields(i,1)).(yfields(i,2));
                plot(x,y);
                ylabel(sprintf("%s:%s", yfields(i,1),yfields(i,2)));
            end
            xlabel(sprintf("%s:%s",xfield(1,1),xfield(1,2)));
        end
        
        function ft = FlightTime(obj, opts)
            arguments
                obj
                opts.ThOutThreshold double = 0.01
            end
            
            ThO = obj.Data.CTUN.ThO;
            flight_I = ThO > opts.ThOutThreshold;
            time_us = obj.Data.CTUN.TimeUS;
            
            ft_us = trapz(time_us, flight_I);
            ft_s = ft_us*1e-6;
            ft = seconds(ft_s);
        end
        
        function t = get.BootTime(obj)
            BOOT_Wks = obj.Data.GPS.GWk(1);
            BOOT_Ms = obj.Data.GPS.GMS(1);
            epoch_date = datetime(1980,01,06, 'TimeZone', 'UTC') + calweeks(BOOT_Wks);
            t = epoch_date + seconds(BOOT_Ms/1000);
            t.TimeZone = "America/Chicago";
        end
        
        function t = convTimeUS(obj, time_us)
            t = obj.BootTime + seconds(time_us/1e6);
        end
        
        function v_corr = setCorrectedBusVoltage(obj)
            bat = obj.Data.BAT;
            v = bat.Volt;
            
            f_corr_start = obj.StartingVoltage - mean(v(1:10));
            f_corr_end = obj.EndingVoltage - mean(v(end-10:end));
            f_corr = linspace(f_corr_start, f_corr_end, numel(v))';
            
            v_corr = v + f_corr;
            obj.Data.BAT.VoltCorr = v_corr;
        end
        
        function q = setSOCCurve(obj)
             bat = obj.Data.BAT;
             v = bat.VoltCorr;
             q = interp1(obj.BatteryLookup.V_OCV * obj.BatteryCells, obj.BatteryLookup.SOC, v, 'pchip', 'extrap');
             q(q > 1) = 1;
             q(q < 0) = 0;
             obj.Data.BAT.SOC = q;
        end
        
        function q = get.StartingSOC(obj)
            q_vec = obj.Data.BAT.SOC;
            q = mean(q_vec(1:10));
        end
        
        function q = get.EndingSOC(obj)
            q_vec = obj.Data.BAT.SOC;
            q = mean(q_vec(end-10:end));
        end
            
        function save(obj)
            t = obj.BootTime;
            t.Format = 'MMddyyyy';
            fname = "FlightLog_"+string(t);
            FL = obj;
            save(fname, 'FL');
        end
    end
    
    methods (Access = private)
        function data = makeDataStruct(obj)
            raw_names = string(fields(obj.Raw));
            class_filter = ~contains(raw_names, "_label");
            class_names = unique(raw_names(class_filter));
            
            data = struct();
            for i = 1:numel(class_names)
                class_name = class_names(i);
                label_name = class_name + "_label";
                if ismember(label_name, raw_names)
                    field_names = string(obj.Raw.(label_name));
                    
                    class_raw = obj.Raw.(class_name);
                    
                    class_struct = struct();
                    for j = 1:numel(field_names)
                        class_struct.(field_names(j)) = class_raw(:,j);
                    end
                    data.(class_name) = class_struct;
                else
                    data.(class_name) = obj.Raw.(class_name);
                end
            end
        end
        
        function data_out = processTimeUS(obj)
            data_out = obj.Data;
            class_names = string(fields(data_out));
            for i = 1:numel(class_names)
               class = data_out.(class_names(i));
               if isa(class, 'struct')
                   class_fields = string(fields(class));
                   if ismember("TimeUS", class_fields) && ~ismember("Time", class_fields)
                       data_out.(class_names(i)).Time = convTimeUS(obj, data_out.(class_names(i)).TimeUS);
                   end
               end
            end
        end
    end
end

